" Author: Yuxin Wu <ppwwyyxxc@gmail.com>"

set nocompatible                    " Use Vim Settings (Not Vi). This must be first, because it changes other options as a side effect.
syntax on
filetype off						" for vundle
filetype plugin indent on

" Environment: f[[
if exists('$TMUX')                 " fix keymap under screen
    " tmux will send xterm-style keys when its xterm-keys option is on
    exec "set <xUp>=\e[1;*A"
    exec "set <xDown>=\e[1;*B"
    exec "set <xRight>=\e[1;*C"
    exec "set <xLeft>=\e[1;*D"
endif

if ! has("gui_running")                " fix alt key under terminal
	for i in range(48, 57) + range(65, 90) + range(97, 122)
		exe "set <A-" . nr2char(i) . ">=" . nr2char(i)
	endfor
endif
set shell=zsh\ -f
set iskeyword+=%,&,?,\|,\\,!
set isfname-==
set grepprg=grep\ -nH\ $*
set t_vb=                              " shut up bell
set confirm
set shortmess+=s
set fileencodings=ucs-bom,utf8,cp936,big5,euc-jp,euc-kr,gb18130,latin1
set viewoptions=folds,options,cursor,slash,unix
set virtualedit=onemore
scriptencoding utf-8
set ttyfast
" --------------------------------------------------------------------- f]]
" UI: f[[
set background=light
if has("gui_running")                  " for gvim
	set antialias                      " font antialias
	set guifont=inconsolata\ 13
	"set guifont=Monospace\ 12
	set guifontwide=WenQuanYi\ Micro\ Hei\ 13
	set guioptions=aegi                " cleaner gui
	set linespace=3
	set background=dark
	colo molokai
	hi CursorColumn guibg=Green
	hi Matchmaker guibg=#333
endif
set t_Co=256
hi LineNr ctermfg=134 guifg=#d426ff
hi VertSplit ctermbg=none ctermfg=55 cterm=none guifg=#65ec9b
au BufEnter * if &buftype == "quickfix" | syn match Error "error:" | endif
hi Search guibg=#8ca509
hi CursorLineNr ctermfg=red
hi Statement ctermfg=3
hi Visual ctermbg=81 ctermfg=black cterm=none
hi MatchParen ctermbg=yellow ctermfg=black
hi Pmenu ctermfg=81 ctermbg=16
hi Cursorline ctermfg=117 cterm=italic guifg=Cyan
hi Comment ctermfg=blue guifg=#145ecc
hi Search ctermfg=red ctermbg=cyan
hi DiffAdd ctermbg=none ctermfg=LightBlue
hi DiffChange ctermbg=none ctermfg=yellow
hi DiffText ctermbg=none ctermfg=55
set concealcursor=

" Highlight Class and Function names
func! HighlightClasses()
	syn match cCustomClass     "\w\+\s*\(::\)\@="
	hi def link cCustomClass     cppType
endfunc
au syntax * call HighlightClasses()

" Spell Check:
hi clear SpellBad
hi SpellBad term=standout term=underline cterm=italic ctermfg=none ctermbg=black guifg=red
hi clear SpellCap
hi SpellCap term=standout term=underline cterm=italic ctermfg=blue guifg=blue
hi clear SpellLocal
hi SpellLocal term=standout term=underline cterm=italic ctermfg=blue guifg=blue
hi clear SpellRare
hi SpellRare term=standout term=underline cterm=italic ctermfg=Blue guifg=blue
" Statusline Highlight:
au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse

set mouse=a
set showcmd                            " display incomplete commands right_bottom
set numberwidth=1
set relativenumber
set number
set ruler
set rulerformat=%35(%=%r%Y\|%{&ff}\|%{strlen(&fenc)?&fenc:'none'}\ %m\ %l/%L%)
set laststatus=2
set noshowmode

set scrolljump=5                       " lines to scroll with cursor
set scrolloff=5                        " minimum lines to keep at border
set sidescroll=3
set sidescrolloff=3
set nowrap                             " do not wrap long lines
set whichwrap=b,s,<,>,[,]
set fillchars=vert:*,fold:-,diff:-
if v:version > 703 || has("patch541")
	set formatoptions+=nMjm            " m: linebreak for Chinese
else
	set formatoptions+=nMm
endif
set splitright splitbelow
set textwidth=80
set backspace=indent,eol,start         " allow backspace over everything
set smarttab
set autoindent smartindent
set tabstop=4 softtabstop=4 shiftwidth=4
set showmatch matchtime=0

set ignorecase smartcase incsearch hlsearch
set magic                              " for regular expressions
xnoremap / <Esc>/\%V
" use /[^\x00-\x7F] to search multibytes
" ---------------------------------------------------------------------f]]
" History:
set nobackup noswapfile
set history=200                        " command line history
au CursorHold,CursorHoldI,BufEnter,WinEnter * checktime
set autoread                           " auto reload file when changes have been detected
set updatetime=500                     " time threshold for CursorHold event

" ---------------------------------------------------------------------
" Basic Maps:
let mapleader=" "
let maplocalleader=","
set timeoutlen=300                     " wait for ambiguous mapping
set ttimeoutlen=0                      " wait for xterm key escape
inoremap <c-\> <Esc>
vnoremap <c-\> <Esc>
"inoremap <Esc> <Esc>
inoremap jj <ESC>
nnoremap ; :
command! -bang -nargs=* Q q<bang>
command! -bang -nargs=* -complete=file W w<bang> <args>
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
nnoremap <Tab> i<Tab><Esc>
nnoremap <S-Tab> ^i<Tab><Esc>
cnoremap %% <C-R>=expand('%:h').'/'<cr>
cnoremap cd. lcd %:p:h
nnoremap "gf <C-W>gf
" disable ex mode and help
nnoremap Q <Esc>
nnoremap <F1> :echo<CR>
inoremap <F1> <C-o>:echo<CR>

vnoremap <expr> I ForceBlockwiseVisual('I')
vnoremap <expr> A ForceBlockwiseVisual('A')
func! ForceBlockwiseVisual(key)
	if mode () == 'v'
		return "\<C-v>". a:key
	elseif mode () == 'V'
		return "\<C-v>0o$". a:key
	else | return a:key | endif
endfunc
" ---------------------------------------------------------------------
" Clipboard:                           " + register may be wrong under xterm
nnoremap Y y$
set pastetoggle=<F12>                  " toggle paste insert mode
xnoremap <c-c> "+y
inoremap <c-v> <Esc>:set paste<CR>"+p:set nopaste<CR>a
" insert word of the line above
inoremap <C-Y> <C-C>:let @z = @"<CR>mz
			\:exec 'normal!' (col('.')==1 && col('$')==1 ? 'k' : 'kl')<CR>
			\:exec (col('.')==col('$') - 1 ? 'let @" = @_' : 'normal! yw')<CR>
			\`zp:let @" = @z<CR>a
" delete to blackhole register
nnoremap <Del> "_x
xnoremap <Del> "_d
xnoremap p "_dp
" ---------------------------------------------------------------------
" Folding:
set foldmethod=marker
set foldmarker=f[[,f]]
set foldnestmax=2                      " nesting
set foldminlines=5
"set foldcolumn=0
"set diffopt=filler,foldcolumn:0
nnoremap zo zO
" ---------------------------------------------------------------------
" QuickFix:
set switchbuf=split
func! QuickfixToggle()
	for i in range(1, winnr('$'))
		if getbufvar(winbufnr(i), '&buftype') == 'quickfix'
			cclose | lclose
			return
		endif
	endfor
	copen
endfunc
nnoremap <Leader>q :call QuickfixToggle()<CR>
" ---------------------------------------------------------------------
" Cursor Movement: f[[
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <c-e> $
inoremap <c-h> <Left>
inoremap <c-j> <Down>
inoremap <c-k> <Up>
inoremap <c-l> <Right>
imap <c-e> <End>
imap <c-d> <Home>
inoremap <c-b> <S-Left>
inoremap <a-f> <Esc>lwi
inoremap <a-b> <Esc>bi
cmap <c-j> <Down>
cmap <c-k> <Up>
cmap <a-f> <S-Right>
cmap <c-b> <S-Left>
cmap <a-b> <S-Left>
cmap <c-e> <End>
cmap <c-d> <Home>
" undoable C-U, C-W
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>
"vnoremap << <gv<gv
"vnoremap >> >gv>gv
" Save Cursor Position:
au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
" Hint On Moving Cursor:
" Highlight Chosen Columns:
func! ToggleColorColumn(col)
	let col_num = (a:col == 0) ? virtcol(".") : a:col
	let cc_list = split(&cc, ',')
	if count(cc_list, string(col_num)) <= 0
		exec "set cc+=".col_num
	else
		exec "set cc-=".col_num
	endif
endfunc
hi ColorColumn ctermbg=red
nmap <LocalLeader>c :call ToggleColorColumn(0)<CR>

" ---------------------------------------------------------------------
" Window:
nmap <c-w><Right> 4<c-w>>
nmap <c-w><Left> 4<c-w><
nmap <c-w><Down> 4<c-w>+
nmap <c-w><Up> 4<c-w>-
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l
nmap <c-k> <c-w>k
nmap <c-j> <c-w>j
imap <Left> <Esc><Left>
imap <Right> <Esc><Right>
imap <Down> <Esc><Down>
imap <Up> <Esc><Up>
au vimResized * exe "normal! \<c-w>="
" ---------------------------------------------------------------------
" Buffer:
nnoremap <a-Down> :bn! <CR>
nnoremap <a-Up> :bp! <CR>
inoremap <a-Down> <ESC>:bn! <CR>
inoremap <a-Up> <ESC>:bp! <CR>
nnoremap <a-k> :bd<CR>
" ---------------------------------------------------------------------f]]
" Auto Fill Brackets:
func! AutoPair(open, close)
	let line = getline('.')
	if col('.') > strlen(line) || index([' ', ']', ')', '}'], line[col('.') - 1]) > 0
		return a:open . a:close . "\<ESC>i"
	else
		return a:open
	endif
endfunc
func! ClosePair(char)
	return (getline('.')[col('.') - 1] == a:char ? "\<Right>" : a:char)
endfunc
inoremap <expr> ( AutoPair('(', ')')
inoremap <expr> ) ClosePair(')')
inoremap <expr> [ AutoPair('[', ']')
inoremap <expr> ] ClosePair(']')
inoremap <expr> { AutoPair('{', '}')
inoremap <expr> } ClosePair('}')
inoremap " ""<Left>
inoremap ' ''<Left>
au Filetype mkd,tex,txt,lrc,scheme silent! iunmap '
au Filetype vim silent! iunmap "
au Filetype vim silent! iunmap ""
" ---------------------------------------------------------------------
" Delete Trailing Whitespaces On Saving:
func! DeleteTrailingWhiteSpace()
	normal mZ
	%s/\s\+$//e
	normal `Z
endfunc
au BufWrite * if &ft != 'mkd' | call DeleteTrailingWhiteSpace() | endif
" ---------------------------------------------------------------------
" Head Update:
func! LastMod()
	let l:line = line(".")                            " save cursor position
	let l:col = col(".")
	let l = min([line("$"), 8])
	exec '1,' . l . 'substitute/' . '^\(.*File:\)[^\*]*\(.*\)$' . '/\1 ' . expand('<afile>:t') . '\2/e'
	exec '1,' . l . 'substitute/' . '^\(.*Date:\)[^\*]*\(.*\)$' . '/\1 ' . strftime('%a %b %d %H:%M:%S %Y %z') . '\2/e'
	call cursor(l:line, l:col)
endfun
au BufWritePre,FileWritePre * call LastMod()

" ---------------------------------------------------------------------
" Diff Current Buffer With Correspondent Saved File:
func! DiffWithSaved()
	let ft=&filetype
	diffthis
	vnew | r # | normal! 1Gdd
	diffthis
	exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . ft
endfunc
command! DiffSaved call DiffWithSaved()
nnoremap <Leader>df :call DiffWithSaved()<CR>
" ---------------------------------------------------------------------f]]
" Misc Functions:
" Copy,Backup,Evening,Nowrap,VirtualEdit,Line,Noh,Sync,pagejoin,pageq
nmap <Leader>cp :!xclip -i -selection clipboard % <CR><CR>
nnoremap <Leader>bk :!mkdir -p vim_backup; cp % vim_backup/%_bk --backup=numbered <CR>

nmap <Leader>nw :set wrap!<CR>
nmap <Leader>rd :redraw!<CR>
nnoremap <silent> <Leader>no :noh <CR>:call clearmatches()<CR>:silent! SearchBuffersReset<CR>
nnoremap <Leader>sd :! sdcv `echo <cword> \| sed -e 's/[^[:alnum:]]//g'` <CR>

nnoremap <Leader>pj v}gJj0
nnoremap <leader>pq gqip
nmap <Leader>syn :vsplit<bar>wincmd l<bar>exe "norm! Ljz<c-v><cr>"<cr>:set scb<cr>:wincmd h<cr> :set scb<cr>

nnoremap <Leader>-- o<C-R>=printf('%s%s', printf(&commentstring, ' '), repeat('-', 90))<CR><Home><Esc>

nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
			\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
			\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" ---------------------------------------------------------------------f]]
" Completetion And Tags: f[[
set wildmenu                                         " command-line completion
set wildmode=list:longest,full
set wildignore+=*.o,*.exe,main,*.pyc,*.aux,*.toc     " don't add .class for javacomplete searching for Reflection.class
set wildignore+=*.git,*.svn,*.hg
set wildignore+=*.sqlite3
set wildignore+=*~,*.bak,*.sw
set completeopt=menu,preview,longest
set complete=.,w,b,u
set path+=./include,                                 " path containing included files for searching variables
" Prevent the first completion result to be chosen, only needed for C++?
inoremap <C-O> <C-X><C-O><C-P>
inoremap <C-P> <C-X><C-P>
set tags=.tags
" ---------------------------------------------------------------------f]]
" Set Title:        " TODO for normal type of file f[[
func! SetTitle()
	let file_name = expand("%:t")
	let file_head = expand("%:t:r")
	if &ft == 'sh'
		call setline(1, "!/bin/bash -e")
		normal G
	elseif file_name =~ "^[^.]*\.hh*[px]*$"
		call append(line("$"), ["#pragma once", ""])
		normal G
	elseif &ft == 'cpp'
		call append(line("$"), ["#include <iostream>","#include <cstdlib>","#include <cstring>",
					\ "#include <cstdio>","#include <limits>","#include <vector>", "using namespace std;",
					\ "#define MSET(ARR, x) memset(ARR, x, sizeof(ARR))",
					\ "#define REP(x, y) for (auto x = decltype(y){0}; x < (y); x ++)",
					\ "#define REPL(x, y, z) for (auto x = decltype(z){y}; x < (z); x ++)",
					\ "#define REPD(x, y, z) for (auto x = decltype(z){y}; x >= (z); x --)",
					\ "#define P(a) std::cout << (a) << std::endl",
					\ "#define PP(a) std::cout << #a << \": \" << (a) << std::endl",
					\ "#define PA(arr) \\", "	do { \\", "		std::cout << #arr << \": \"; \\",
					\ "		std::copy(begin(arr), end(arr), std::ostream_iterator<std::remove_reference<decltype(arr)>::type::value_type>(std::cout, \" \")); \\",
					\ "		std::cout << std::endl;  \\",
					\ "	} while (0)" ])
		normal G
	elseif &ft == 'python'
		0put=\"!/usr/bin/env python2\<nl> -*- coding: UTF-8 -*-\"
		normal G
	elseif &ft == 'ruby'
		0put=\"!/usr/bin/env ruby\<nl> coding: utf-8\"
		normal G
	elseif &ft == 'java'
		call append(line("$"), ["public class ". file_head . " {",
			\ "\tpublic static void main(String[] args) {", "\t}", "}"])
		normal jjj
	elseif &ft == 'tex' || &ft == 'javascript' || &ft == 'coffee'
		normal G
	endif
endfunc
au BufNewFile *.* call SetTitle()
" ---------------------------------------------------------------------f]]
" Make For Programming: f[[
"for gprof
command! -nargs=* Makepg call Make_arg("g++ % -o %:r -pg -Wall -std=c++11", <f-args>)

func! Make()                        " silent make with quickfix window popup
	if &ft == 'cpp'
		if filereadable(getcwd() . "/Makefile")
			let &makeprg="make"
		elseif  filereadable(getcwd() . "/../Makefile")
			let &makeprg="make -C .."
		endif
	endif
	make
	redraw!
	for i in getqflist()
		if i['valid']
			cwin | winc p | return
		endif
	endfor
endfunc

func! FindMakefile()
	exec "cd " . expand ("%:p:h")
	while ! filereadable(getcwd() . "/Makefile") && getcwd () != "/"
		cd ..
	endw
	:!make
endfunc
au Filetype gnuplot let &makeprg="gnuplot % ; feh ./*"
au Filetype dot let &makeprg="dot -Tpng -O -v % ; feh %.png"
au Filetype php let &makeprg="php %"
au Filetype r let &makeprg="R <% --vanilla"
func! InstantRun()
	if &ft == 'python'
		if matchstr(getline(1), 'python2') == ""
			:!python %
		else | :!python2 %
		endif
	elseif &ft == 'ruby' | :!ruby %
	elseif &ft == 'sh' | :!bash %
	elseif &ft == 'cpp' | :!gdb %<
	elseif &ft == 'java' | :! java %<
	elseif &ft == 'javascript' | :! node %
	elseif &ft == 'coffee' | :! coffee %
	else | call Make() | endif
endfunc
nnoremap <Leader>rr :call InstantRun() <CR>
nnoremap <Leader>mk :call Make()<CR>
nnoremap <Leader>mr :!make run <CR>
nnoremap <Leader>make :call FindMakefile()<CR>
" --------------------------------------------------------------------- f]]
" Mapping For Programming: (These should've been moved to ftplugin) f[[
func! Tex_Block(label)
	let Blk_Dict={"e": "enumerate","d": "description", "m": "matrix", "c": "cases",
				\ "f": "figure", "t": "table", "tt": "tabular", "eq": "equation*", "mp": "minipage"}
	let blk_text = (has_key(Blk_Dict, a:label)) ? Blk_Dict[a:label ] : a:label
	call append(line('.') - 1,["\\begin{". blk_text ."}","","\\end{". blk_text ."}"])
	normal kk
	startinsert
endfunc
func! Tex_Formula_init()
	inoremap <buffer> <c-f> \dfrac{}{}<Esc>2hi
	inoremap <buffer> <c-r> \sqrt{}<Left>
	inoremap <buffer> <c-Left> \Leftrightarrow<Space>
	inoremap <buffer> <c-Right> \Rightarrow<Space>
	inoremap <buffer> \left \left<Space>\right<Esc>5hi

	" Symbol:
	inoremap <buffer> `a \alpha
	inoremap <buffer> `b \beta
	inoremap <buffer> `c ^\circ
	inoremap <buffer> `D \Delta
	inoremap <buffer> `d \mathrm{d}
	inoremap <buffer> `G \Gamma
	inoremap <buffer> `l \lambda
	inoremap <buffer> `m \mu
	inoremap <buffer> `O \Omega
	inoremap <buffer> `o \omega
	inoremap <buffer> `p \pi
	inoremap <buffer> `r \rho
	inoremap <buffer> `R \mathbb{R}
	inoremap <buffer> `s \sigma
	inoremap <buffer> `v \varphi
endfunc
func! Tex_init()
	" pdf auto refresh preview
"	au BufWritePost *.tex call system("zsh -c 'pgrep -a xelatex || make; killall -SIGHUP mupdf > /dev/null 2 >&1' &")
	au BufWritePost *.tex call system("zsh -c 'pgrep -a xelatex || make > /dev/null 2>&1;' &")

	setl nocursorline                                " for performance
	hi clear Conceal
	"let &conceallevel=has("gui_running") ? 1: 2        " conceal problem for gvim
	set concealcursor=
	setl sw=2 sts=2 expandtab
	set makeef=/dev/null

	inoremap <buffer> $$ $<Space>$<Left>
	inoremap <buffer> " ``''<Left><Left>
	nmap <buffer> <Leader>" xi``<Esc>,f"axi''<Esc>
	inoremap <buffer> ... \cdots<Space>
	call Tex_Formula_init()

	inoremap <buffer> \[ \[<Space>\]<Left><Left>
	inoremap <buffer> \{ \{<Space>\}<Left><Left>
	inoremap <buffer> \langle \langle<Space><Space>\rangle<Esc>7hi
	inoremap <buffer> \verb \verb<Bar><Bar><Left>
	inoremap <buffer> \beg \begin{}<Left>
	inoremap <buffer> \bb <Esc>:call Tex_Block("")<Left><Left>
	inoremap <buffer> \bbt <Esc>:call Tex_Block("t")<CR><Up><End>[H]<Down>\centering<CR>\caption{\label{tab:}}<Esc>k:call Tex_Block("tabular")<CR>
	inoremap <buffer> \bbf <Esc>:call Tex_Block("f")<CR><Up><End>[H]<Down>\centering<CR>\includegraphics[width=\textwidth]{res/}<CR>\caption{\label{fig:}}<Esc>
	inoremap <buffer> \bbm <Esc>:call Tex_Block("mp")<CR><Up><End>[b]{0.46\linewidth}<Down>\centering<CR>\includegraphics[width=\textwidth]{res/}<CR>\caption{\label{fig:}}<Esc>
	inoremap <buffer> \bf \textbf{}<Left>
	xmap <buffer> \ve s\|i\verb<BS><Del><Esc>
	xmap <buffer> \bbe di\bbe<CR><Tab><Esc>pj
	xmap <buffer> \bbd di\bbd<CR><Tab><Esc>pj
	xmap <buffer> \bf s}i\textbf<Esc>
	xmap <buffer> \em s}i\emph<Esc>
	xmap <buffer> <Leader>tab :s/\s\+/ \&/g<CR>gv:s/$/\\\\/g<CR>gv<Space>tt
endfunc
func! C_grammar_init()
	inoremap <buffer> while<Space> while<Space>()<Left>
	inoremap <buffer> {{ {}<Left><CR><CR><Up><Tab>
	inoremap <buffer> if<Space> if<Space>()<Left>
	inoremap <buffer> for<Space> for<Space>()<Left>
endfunc
func! C_init()
	abbr #i #include
	abbr #I #include
	let &makeprg="clang++ % -g -Wall -Wextra -O0 -std=c++11 -o %<"
	call C_grammar_init()
	syn keyword cppType real_t Vec Vec2D Vector Matrix Plane Sphere Geometry Ray Color Img imgptr PII PDB PDD PDI PID
	syn keyword cppSTLType T
endfunc
func! Python_init()
	let &makeprg="pylint --reports=n --output-format=parseable %"
	setl expandtab
	setl ts=4 sw=4 sts=4
	setl textwidth=78
	syn keyword pythonDecorator self
	inoremap <buffer> . .<C-X><C-O><C-P>
endfunc
func! Ruby_init()
	let &makeprg="ruby -c %"
	imap <C-CR> <CR><CR>end<Esc>-cc
	setl expandtab
	setl ts=2 sw=2 sts=2
endfunc
func! Java_init()
	let &makeprg="javac %"
	syn keyword javaType String Integer Double Pair Collection Collections List Boolean Triple ArrayList Entry LinkedList Map HashMap Set HashSet TreeSet TreeMap Iterator Iterable Comparator Arrays ListIterator Vector File Character Object Exception Random
	" TODO match java class name with regex
	let java_comment_strings = 1
	let java_mark_braces_in_parens_as_errors= 1
	let java_ignore_javadoc = 1
	let java_minlines = 150
	call C_grammar_init()
endfunc
func! CS_init()
	call C_grammar_init()
	syn keyword csType var
endfunc
func! Js_init()
	let &makeprg="node %"
	setl ts=2 sw=2 sts=2
	call C_grammar_init()
endfunc
func! MarkDown_init()
	call Tex_Formula_init()
	set ofu=
	set nofoldenable
	inoremap {% {%  %}<Left><Left>
	inoremap ``` ```<CR>```<Up><End><Esc>
	abbr more <!-- more -->
	xmap <Leader>l s]%a()
	xmap <Leader>e s*gvs*
endfunc
func! Lua_init()
	set makeef=/dev/null
	let &makeprg="lua %"
	setl expandtab
	setl ts=4 sw=4 sts=4
endfunc
au FileType tex :call Tex_init()
au FileType markdown :call MarkDown_init()
au FileType cpp,c :call C_init()
au FileType cs :call CS_init()
au FileType python :call Python_init()
au FileType ruby :call Ruby_init()
au FileType java :call Java_init()
au FileType javascript :call Js_init()
au FileType r :call C_grammar_init()
au FileType lua :call Lua_init()

" ---------------------------------------------------------------------f]]
" FileType Commands:
au BufRead pip.conf setf conf
au BufWritePost .Xresources silent !xrdb %
au BufWritePost .tmux.conf silent !tmux source %
au BufRead tmux.conf,.tmux* setf tmux
au BufRead /usr/include/* setf cpp
au BufRead SConstruct setf python
au BufNewFile,BufRead config.fish set ft=sh						   " syntax for fish config file
au BufNewFile,BufRead *.json setl ft=json syntax=txt
au BufNewFile,BufRead /tmp/dir*,/tmp/tmp* setf txt				   " for vidir / vimv
au BufWritePost,BufWrite __doc__ setf txt
au BufNewFile,BufRead *.mako setf mako
au BufNewFile,BufRead *.g,*.y,*.ypp setl syntax=antlr3			   " syntax for CFG
au BufNewFile,BufRead *.ejs set syntax=html ft=html
au BufNewFile,BufRead *.gprof setf gprof
au BufNewFile,BufRead *.txt,*.doc,*.pdf setf txt
au BufReadPre *.doc,*.class,*.pdf setl ro
au BufReadPost *.doc silent %!antiword "%"
au BufRead *.class exe 'silent %!javap -c "%"' | setf java
au BufReadPost *.pdf silent %!pdftotext -nopgbrk "%" -
au BufNewFile,BufRead *.lrc setf lrc
au Filetype lrc :match Underlined /.\%45v.\+/
au Filetype lrc setl textwidth=45                                  " for display in iphone
au BufNewFile,BufRead *.decaf setf cpp
au Filetype coffee setl omnifunc=nodejscomplete#CompleteJS
au Filetype coffee,jade,stylus,scheme setl expandtab
au Filetype scheme,verilog,stylus,vhdl,php,html,xml,zcml,yaml,json,coffee,jade,ejs setl tabstop=2 shiftwidth=2 softtabstop=2
au FileType json setl foldmethod=syntax
let g:tex_flavor = 'latex'                                         " default filetype for tex
au FileType sh,zsh inoremap ` ``<Left>
au BufWritePost *
			\ if getline(1) =~ "^#!/bin/[a-z]*sh" |
			\   exe "silent !chmod a+x <afile>" |
			\ endif
